#!/usr/bin/env python3
"""
PPT组装器

将截图组装成PPT,支持质量验证和元数据嵌入。
"""

from pathlib import Path
from typing import List, Dict, Optional
from pptx import Presentation
from pptx.util import Inches
from PIL import Image
from datetime import datetime


def create_ppt_from_screenshots(
    screenshot_dir: Path,
    output_ppt: Path,
    pattern: str = "slide_*.png",
    slide_width: float = 10.0,
    slide_height: float = 5.625,
    title: Optional[str] = None,
    author: Optional[str] = None
) -> Dict[str, any]:
    """
    将截图组装成PPT

    Args:
        screenshot_dir: 截图目录
        output_ppt: 输出PPT路径
        pattern: 文件匹配模式
        slide_width: 幻灯片宽度(英寸)
        slide_height: 幻灯片高度(英寸)
        title: PPT标题(元数据)
        author: 作者(元数据)

    Returns:
        结果字典,包含创建的页数、文件路径等信息
    """
    # 获取所有截图
    screenshots = sorted(screenshot_dir.glob(pattern))

    if not screenshots:
        raise ValueError(f"No screenshots found in {screenshot_dir} with pattern {pattern}")

    print(f"📸 找到 {len(screenshots)} 张截图\n")

    # 创建PPT
    prs = Presentation()

    # 设置幻灯片尺寸
    prs.slide_width = Inches(slide_width)
    prs.slide_height = Inches(slide_height)

    # 设置元数据
    if title:
        prs.core_properties.title = title
    if author:
        prs.core_properties.author = author

    prs.core_properties.comments = f"Generated by html-to-ppt skill at {datetime.now().isoformat()}"

    # 获取空白版式
    blank_slide_layout = prs.slide_layouts[6]

    # 添加每张截图为一页幻灯片
    for screenshot in screenshots:
        print(f"  ➕ 添加: {screenshot.name}")

        # 创建新幻灯片
        slide = prs.slides.add_slide(blank_slide_layout)

        # 添加图片,填满整个幻灯片
        slide.shapes.add_picture(
            str(screenshot),
            left=0,
            top=0,
            width=Inches(slide_width),
            height=Inches(slide_height)
        )

    # 保存PPT
    prs.save(str(output_ppt))

    file_size_mb = output_ppt.stat().st_size / (1024 * 1024)

    print(f"\n✅ PPT已生成: {output_ppt}")
    print(f"📊 共 {len(screenshots)} 页")
    print(f"📦 文件大小: {file_size_mb:.2f}MB\n")

    return {
        "output_path": str(output_ppt),
        "slide_count": len(screenshots),
        "file_size_mb": round(file_size_mb, 2),
        "screenshots": [str(s) for s in screenshots]
    }


def validate_screenshots(
    screenshot_dir: Path,
    pattern: str = "slide_*.png",
    expected_width: int = 1920,
    min_height: int = 800
) -> Dict[str, any]:
    """
    验证截图质量

    Args:
        screenshot_dir: 截图目录
        pattern: 文件匹配模式
        expected_width: 预期宽度
        min_height: 最小高度

    Returns:
        验证结果字典
    """
    screenshots = sorted(screenshot_dir.glob(pattern))

    if not screenshots:
        return {
            "valid": False,
            "errors": ["No screenshots found"],
            "warnings": [],
            "results": []
        }

    errors = []
    warnings = []
    results = []

    for screenshot in screenshots:
        img = Image.open(screenshot)
        width, height = img.size

        result = {
            "name": screenshot.name,
            "width": width,
            "height": height,
            "valid": True,
            "errors": []
        }

        # 检查宽度
        if width != expected_width:
            error_msg = f"Width {width} != expected {expected_width}"
            result['errors'].append(error_msg)
            result['valid'] = False
            errors.append(f"{screenshot.name}: {error_msg}")

        # 检查高度
        if height < min_height:
            warning_msg = f"Height {height} < minimum {min_height}"
            result['errors'].append(warning_msg)
            result['valid'] = False
            warnings.append(f"{screenshot.name}: {warning_msg}")

        results.append(result)

    return {
        "valid": len(errors) == 0,
        "errors": errors,
        "warnings": warnings,
        "results": results,
        "total": len(screenshots),
        "valid_count": sum(1 for r in results if r['valid'])
    }


def validate_ppt(
    ppt_path: Path,
    expected_slide_count: int,
    max_file_size_mb: float = 50.0
) -> Dict[str, any]:
    """
    验证PPT质量

    Args:
        ppt_path: PPT文件路径
        expected_slide_count: 预期幻灯片数量
        max_file_size_mb: 最大文件大小(MB)

    Returns:
        验证结果字典
    """
    if not ppt_path.exists():
        return {
            "valid": False,
            "errors": ["PPT file not found"],
            "warnings": []
        }

    prs = Presentation(str(ppt_path))

    errors = []
    warnings = []

    # 验证幻灯片数量
    actual_count = len(prs.slides)
    if actual_count != expected_slide_count:
        errors.append(
            f"Slide count {actual_count} != expected {expected_slide_count}"
        )

    # 验证幻灯片尺寸 (16:9)
    expected_width = Inches(10)
    expected_height = Inches(5.625)

    if prs.slide_width != expected_width:
        warnings.append(f"Slide width {prs.slide_width} != {expected_width}")

    if prs.slide_height != expected_height:
        warnings.append(f"Slide height {prs.slide_height} != {expected_height}")

    # 验证文件大小
    file_size_mb = ppt_path.stat().st_size / (1024 * 1024)

    if file_size_mb > max_file_size_mb:
        warnings.append(f"File size {file_size_mb:.2f}MB > {max_file_size_mb}MB")

    return {
        "valid": len(errors) == 0,
        "errors": errors,
        "warnings": warnings,
        "slide_count": actual_count,
        "file_size_mb": round(file_size_mb, 2),
        "slide_width": prs.slide_width,
        "slide_height": prs.slide_height
    }


def generate_quality_report(
    screenshot_validation: Dict,
    ppt_validation: Dict,
    output_file: Optional[Path] = None
) -> str:
    """
    生成质量验证报告

    Args:
        screenshot_validation: 截图验证结果
        ppt_validation: PPT验证结果
        output_file: 输出报告文件路径(可选)

    Returns:
        报告文本内容
    """
    report_lines = [
        "# HTML-to-PPT 质量验证报告",
        "",
        f"生成时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        "",
        "## 截图质量",
        ""
    ]

    # 截图验证结果
    if screenshot_validation['valid']:
        report_lines.append(f"✅ 截图验证通过 ({screenshot_validation['valid_count']}/{screenshot_validation['total']})")
    else:
        report_lines.append(f"✗ 截图验证失败 ({screenshot_validation['valid_count']}/{screenshot_validation['total']})")

    if screenshot_validation['errors']:
        report_lines.append("\n### 错误:")
        for error in screenshot_validation['errors']:
            report_lines.append(f"- {error}")

    if screenshot_validation['warnings']:
        report_lines.append("\n### 警告:")
        for warning in screenshot_validation['warnings']:
            report_lines.append(f"- {warning}")

    # 详细结果
    report_lines.append("\n### 详细结果:")
    for result in screenshot_validation['results']:
        status = "✓" if result['valid'] else "✗"
        report_lines.append(f"\n{status} {result['name']}")
        report_lines.append(f"  尺寸: {result['width']}x{result['height']}")
        if result['errors']:
            for error in result['errors']:
                report_lines.append(f"  错误: {error}")

    # PPT验证结果
    report_lines.extend([
        "",
        "## PPT质量",
        ""
    ])

    if ppt_validation['valid']:
        report_lines.append("✅ PPT验证通过")
    else:
        report_lines.append("✗ PPT验证失败")

    report_lines.append(f"\n- 幻灯片数量: {ppt_validation['slide_count']}")
    report_lines.append(f"- 文件大小: {ppt_validation['file_size_mb']}MB")
    report_lines.append(f"- 幻灯片尺寸: {ppt_validation['slide_width']} x {ppt_validation['slide_height']}")

    if ppt_validation['errors']:
        report_lines.append("\n### 错误:")
        for error in ppt_validation['errors']:
            report_lines.append(f"- {error}")

    if ppt_validation['warnings']:
        report_lines.append("\n### 警告:")
        for warning in ppt_validation['warnings']:
            report_lines.append(f"- {warning}")

    # 总结
    report_lines.extend([
        "",
        "## 总结",
        ""
    ])

    if screenshot_validation['valid'] and ppt_validation['valid']:
        report_lines.append("✅ 所有质量检查通过,PPT生成成功!")
    else:
        report_lines.append("⚠️  发现问题,需要返工优化")
        report_lines.append("\n建议:")
        if not screenshot_validation['valid']:
            report_lines.append("- 检查HTML内容是否溢出1080px高度")
            report_lines.append("- 增加页面加载等待时间")
            report_lines.append("- 验证视口尺寸配置")
        if not ppt_validation['valid']:
            report_lines.append("- 检查截图文件数量")
            report_lines.append("- 验证PPT幻灯片尺寸设置")

    report_text = "\n".join(report_lines)

    if output_file:
        output_file.write_text(report_text, encoding='utf-8')
        print(f"📝 质量报告已保存: {output_file}")

    return report_text


# 使用示例
if __name__ == "__main__":
    # 示例1: 组装PPT
    result = create_ppt_from_screenshots(
        screenshot_dir=Path("screenshots"),
        output_ppt=Path("output.pptx"),
        title="云南过桥米线营销方案",
        author="ZTL数智化作战中心"
    )

    # 示例2: 验证截图
    screenshot_validation = validate_screenshots(
        screenshot_dir=Path("screenshots"),
        expected_width=1920,
        min_height=800
    )

    # 示例3: 验证PPT
    ppt_validation = validate_ppt(
        ppt_path=Path("output.pptx"),
        expected_slide_count=7,
        max_file_size_mb=50.0
    )

    # 示例4: 生成报告
    report = generate_quality_report(
        screenshot_validation=screenshot_validation,
        ppt_validation=ppt_validation,
        output_file=Path("quality_report.md")
    )

    print(report)
